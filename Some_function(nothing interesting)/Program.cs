double[,] Sigma = {

    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000392, 0.020207, 0.094785, 0.205473, 0.381446, 0.521093, 0 },

    { 0.0000000131544, 0.0000000476795, 0.000000132749, 0.000000286195, 0.00000061539, 0.00000132752, 0.00000286198, 0.00000615394, 0.0000132753, 0.0000286199,
        0.0000615394, 0.000132753, 0.000286199, 0.000615394, 0.001327527, 0.002861987, 0.006153945, 0.013275272, 0.029812664, 0.062372775, 0.124286877, 0.24667896,
        0.368466195, 0.489962879, 0.833621484, 1.16494521, 1.24311309, 1.31492408, 1.36570825, 0.0 }

};
double[] A = { 0.00000000000292, 0.000000000256 };

double[] dE = { 0.624, 0.1525, 0.250, 0.535, 1.15, 2.5, 5.35, 11.5, 25, 53.5, 115, 250, 535, 1150, 2500, 5350, 11500, 25000,53500,
 100000, 200000, 40000, 200000, 400000, 1100000, 500000,
    1000000, 2500000, 4000000, 0.0000 };

double[] funct = { 37965173, 46951494, 48905291, 50166214, 51450000, 52766204, 54126672, 55511809, 56931922, 58399796, 59894284, 61426511, 63010268, 64622742, 66275933, 67984722,
    69724495, 71508200, 73351893, 75229016, 76969625, 18902346, 18138417, 16967783, 14251756, 7753762, 5703974, 2999352, 551130, 32796 };

Lined_Programming link = new Lined_Programming(Sigma, A, dE, funct);
link.do_fun();

class Lined_Programming
{
    public double[,] Sigma = new double[2, 30];
    public double[] A = new double[2];
    public double[] dE = new double[30];
    public double[] funct = new double[30];

    private double sum_R = 0;
    private double sum_S = 0;
    public Lined_Programming(double[,] sg, double[] a, double[] dex, double[] fun)
    {
        for (int i = 0; i < 30; i++)
        {
            dE[i] = dex[i];
            funct[i] = fun[i];
            Sigma[0, i] = sg[0, i];
            Sigma[1, i] = sg[1, i];
        }
        A[0] = a[0];
        A[1] = a[1];
    }
    public void do_fun()
    {
        for (int i = 0; i <= 1; i++)
        {
            for (int j = 0; j < 30; j++)
            {
                sum_R += funct[j] * Sigma[i, j] * dE[j] * Math.Pow(10, -24);
            }
            sum_S += Math.Pow(1 - (sum_R / A[i]), 2);
        }

        Console.WriteLine(sum_S);
    }
}

